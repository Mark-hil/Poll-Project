name: Build, Test, and Push Docker Image

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:13
        env:
          POSTGRES_DB: Poll_App
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: admin123
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U admin -d Poll_App"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt

      - name: Wait for PostgreSQL
        run: |
          until nc -zv localhost 5432; do echo "Waiting for database connection..."; sleep 1; done

      - name: Run tests
        env:
          DB_NAME: Poll_App
          DB_USER: admin
          DB_PASSWORD: admin123
          DB_HOST: localhost
          DB_PORT: 5432
        run: |
          source .venv/bin/activate
          python manage.py test
          coverage run manage.py test
          coverage report

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get Docker Image Tag
        id: get-tag
        run: |
          if docker pull ${{ secrets.DOCKER_USERNAME }}/poll_app:latest; then
            echo "IMAGE_EXISTS=true" >> $GITHUB_ENV
            VERSION_TAG=$(date +%Y%m%d%H%M%S)
          else
            echo "IMAGE_EXISTS=false" >> $GITHUB_ENV
            VERSION_TAG="latest"
          fi
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/poll_app:${{ env.VERSION_TAG }}
